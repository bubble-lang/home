---
//@ts-nocheck
interface Props {
  initialCode?: string;
  active?: boolean;
}

const { initialCode = "", active = false } = Astro.props;
---

<bubble-repl-tutorial data-initial-code={initialCode} data-active={active.toString()}>
  <div class="my-4 relative">
    <div class="mb-4">
      <slot name="instructions"></slot>
    </div>
    <div class="mb-4">
      <slot name="example"></slot>
    </div>
    <div class="border md:min-w-[500px] rounded-md p-4 relative">
      <div class="error-container mb-4 text-red-500" style="display: none;"></div>
      <div class="terminal-container h-0 overflow-hidden transition-all duration-500 ease-in-out mb-4">
        <div class="terminal font-mono text-lg"></div>
      </div>
      <div class="input-container w-full py-4 border-t" style="display: none;">
        <div class="input-button-container flex w-full items-center">
       
            <textarea
              class="input w-full px-4 py-2 rounded-l-xl border-4 border-r-0 border-blue-50 text-blue-700 focus:outline-none focus:ring-1 ring-inset focus:ring-blue-200 font-mono overflow-hidden resize-none"
              placeholder="Type here and press Enter to run."
              rows="1"
              style="height: auto; min-height: 2.5rem;"
            ></textarea>
         
          <button
            class="run-button self-end px-4 rounded-r-xl border-4 border-blue-50 bg-yellow-300 text-black hover:bg-yellow-400 focus:outline-none"
          >
            Run
          </button>
        </div>
      </div>
    </div>
    <div class="mt-4">
      <div class="solution-content mt-2" style="display: none;">
        <slot name="solution"></slot>
      </div>
    </div>
  </div>
</bubble-repl-tutorial>

<script>
// @ts-nocheck
  class BubbleREPLTutorial extends HTMLElement {
    constructor() {
      super();
      this.bubbleInterpreter = null;
      this.isREPLReady = false;
      this.isFirstRun = true;
      this.isWaitingForInput = false;
      this.inputResolve = null;
      this.inputValue = null;
      this.inputBuffer = '';
      this.isInBlock = false;
      this.blockType = null;
    }

    connectedCallback() {
      this.initialCode = this.getAttribute('data-initial-code') || '';
      this.active = this.getAttribute('data-active') === 'true';
      this.terminal = this.querySelector('.terminal');
      this.errorContainer = this.querySelector('.error-container');
      this.terminalContainer = this.querySelector('.terminal-container');
      this.inputContainer = this.querySelector('.input-container');
      this.input = this.querySelector('.input');
      this.runButton = this.querySelector('.run-button');
      this.solutionToggle = this.querySelector('.solution-toggle');
      this.solutionContent = this.querySelector('.solution-content');

      document.addEventListener('wasm-environment-ready', () => this.initializeWASMInstance());

      this.input.addEventListener("keydown", (event) => {
        if (event.key === "Enter" && !event.shiftKey) {
          event.preventDefault();
          this.handleEnter();
        }
        this.autoResize();
      });

      this.input.addEventListener("input", () => this.autoResize());

      this.runButton.addEventListener("click", () => this.handleRunButton());

      if (this.solutionToggle) {
        this.solutionToggle.addEventListener("click", () => this.toggleSolution());
      }

      if (this.active) {
        this.input.focus();
      }

      this.autoResize();
    }

    autoResize() {
      this.input.style.height = 'auto';
      this.input.style.height = (this.input.scrollHeight) + 'px';
    }

    async initializeWASMInstance() {
      try {
        const factory = document.querySelector('wasm-initializer-factory');
        if (!factory) {
          throw new Error("WASM Initializer Factory not found");
        }
        this.bubbleInterpreter = await factory.createWASMInstance();
        this.isREPLReady = true;
        this.inputContainer.style.display = "block";
        this.input.value = this.initialCode;
        if (this.active) {
          this.input.focus();
        }
        this.autoResize();

        this.bubbleInterpreter.setOutputCallback((text) => {
          this.handleOutput(text);
        });

        if (typeof this.bubbleInterpreter.overrideInput === 'function') {
          this.bubbleInterpreter.overrideInput((message) => {
            return this.handleInput(message);
          });
        }
      } catch (error) {
        console.error("Error initializing WASM instance:", error);
        this.showError(`Failed to initialize REPL: ${error.message}`);
      }
    }

 
    appendToTerminal(text, isInput = false) {
  const lines = text.split('\n');
  lines.forEach((line) => {
    if (line.trim() !== '' || !isInput) { // Only skip empty lines for input
      const newElement = document.createElement("div");
      newElement.textContent = isInput ? `> ${line}` : line;
      if (isInput) {
        newElement.style.color = 'blue';
      }
      this.terminal.appendChild(newElement);
    }
  });
  this.terminalContainer.scrollTop = this.terminalContainer.scrollHeight;
}

    handleEnter() {
      const currentInput = this.input.value.trim();

      if (this.isWaitingForInput) {
        this.submitInput();
      } else if (this.isInBlock || this.isBlockStart(currentInput)) {
        this.isInBlock = true;
        this.inputBuffer += this.input.value + '\n';
        this.appendToTerminal(this.input.value, true);
        this.input.value = '';
        if (this.isBlockStart(currentInput)) {
          this.blockType = this.getBlockType(currentInput);
          this.input.value = '  '; // Add indentation for block content
        }
      } else {
        this.runCode(this.input.value);
      }

      if (this.isBlockEnd(currentInput)) {
        this.isInBlock = false;
        this.runCode(this.inputBuffer.trim()); // Trim the inputBuffer to remove trailing newline
        this.inputBuffer = '';
        this.blockType = null;
      }

      this.autoResize();
    }

    isBlockStart(line) {
      return /^(if|repeat|while)\b/.test(line);
    }

    isBlockEnd(line) {
      switch (this.blockType) {
        case 'if':
          return /^end\s+if\b/.test(line);
        case 'repeat':
          return /^end\s+repeat\b/.test(line);
        case 'while':
          return /^end\s+while\b/.test(line);
        default:
          return false;
      }
    }

    getBlockType(line) {
      if (/^if\b/.test(line)) return 'if';
      if (/^repeat\b/.test(line)) return 'repeat';
      if (/^while\b/.test(line)) return 'while';
      return null;
    }

    handleRunButton() {
      const code = this.isInBlock ? this.inputBuffer + this.input.value : this.input.value;
      this.runCode(code.trim());
    }

    async runCode(code) {
      code = code.replace(/[""]/g, '"').replace(/['']/g, "'");

      if (!this.isREPLReady) {
        this.appendToTerminal("REPL not loaded yet. Please wait...");
      } else if (code !== "") {
        this.appendToTerminal(code, true);

        if (this.isFirstRun) {
          this.revealTerminal();
          this.isFirstRun = false;
        }

        try {
          if ((code.startsWith("set ") || code.includes(" to ") || code.includes(" = ")) && code.includes("input")) {
            let varName, inputPrompt;
            if (code.includes(" = ")) {
              [varName, inputPrompt] = code.split(" = ");
            } else {
              [varName, inputPrompt] = code.split(" to ");
              varName = varName.replace("set ", "");
            }
            varName = varName.trim();
            inputPrompt = inputPrompt.replace("input", "").trim().replace(/^"/, '').replace(/"$/, '');

            this.clearInputAndResetCursor();
            this.inputValue = await this.handleInput(inputPrompt);
            const result = await this.bubbleInterpreter.runBubble(`set ${varName} to "${this.inputValue}"`);
            if (result !== undefined && result !== null && result !== "") {
              this.handleOutput(result);
            }
          } else {
            const result = await this.bubbleInterpreter.runBubble(code);
            if (result !== undefined && result !== null) {
              if (typeof result === 'object') {
                this.handleOutput(JSON.stringify(result));
              } else {
                this.handleOutput(result.toString());
              }
            }
          }
        } catch (error) {
          console.error("Error running code:", error);
          this.handleOutput("Error: " + error.message);
        }
      }

      if (!this.isWaitingForInput && !this.isInBlock) {
        this.clearInputAndResetCursor();
      }
    }

   


    handleOutput(text) {
      text = text.trim();
      if (text !== "") {
        this.appendToTerminal(text);
      }
    }

    handleInput(message) {
      return new Promise((resolve) => {
        this.isWaitingForInput = true;
        this.inputResolve = resolve;
        this.input.placeholder = message || "Enter input...";
        this.input.focus();
        this.runButton.textContent = "Submit";
        this.appendToTerminal(message || "Enter input:");
      }).then((userInput) => {
        this.inputValue = userInput.replace(/[""]/g, '"').replace(/['']/g, "'");
        return this.inputValue;
      });
    }

    submitInput() {
      const userInput = this.input.value;
      this.appendToTerminal(userInput, true);
      this.inputValue = userInput;
      this.input.value = "";
      this.input.placeholder = "Type your code here and press Enter to run";
      this.runButton.textContent = "Run";
      this.isWaitingForInput = false;
      if (this.inputResolve) {
        this.inputResolve(userInput);
        this.inputResolve = null;
      }
      this.autoResize();
    }

    clearInputAndResetCursor() {
      this.input.value = '';
      this.input.focus();
      this.autoResize();
    }

    revealTerminal() {
      this.terminalContainer.style.height = '144px';
      setTimeout(() => {
        this.terminalContainer.style.overflowY = 'auto';
      }, 500);
    }

    toggleSolution() {
      if (this.solutionContent.style.display === "none") {
        this.solutionContent.style.display = "block";
        this.solutionToggle.textContent = "Hide Solution";
      } else {
        this.solutionContent.style.display = "none";
        this.solutionToggle.textContent = "Show Solution";
      }
    }

    showError(message) {
      if (this.errorContainer) {
        this.errorContainer.style.display = 'block';
        this.errorContainer.textContent = message;
      }
    }
  }

  if (!customElements.get('bubble-repl-tutorial')) {
    customElements.define('bubble-repl-tutorial', BubbleREPLTutorial);
  }
</script>