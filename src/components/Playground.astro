---
//@ts-nocheck
interface Props {
  initialCode?: string;
  active?: boolean;
}

const { initialCode = "", active = false } = Astro.props;
---

<bubble-repl-tutorial data-initial-code={initialCode} data-active={active.toString()}>
  <div class="my-4 relative">
    <div class="mb-4">
      <slot name="instructions"></slot>
    </div>
    <div class="mb-4">
      <slot name="example"></slot>
    </div>
    <div class="border md:min-w-[500px] rounded-md p-4 relative">
      <div class="loading-container mb-4">
        <div class="text-center mb-2">Loading...</div>
        <div class="w-full bg-gray-200 rounded-full h-2.5">
          <div class="progress-bar bg-slate-200 h-2.5 rounded-full" style="width: 0%"></div>
        </div>
      </div>
      <div class="error-container mb-4 text-red-500" style="display: none;"></div>
      <div class="terminal-container h-0 overflow-hidden transition-all duration-500 ease-in-out mb-4">
        <div class="terminal font-mono text-lg"></div>
      </div>
      <div class="input-container w-full py-4 border-t" style="display: none;">
        <div class="input-button-container">
          <div class="input-wrapper">
            <input
              type="text"
              class="input w-full px-4 py-2 rounded-l-xl border-4 border-r-0 border-blue-50 text-blue-700 focus:outline-none focus:ring-1 ring-inset focus:ring-blue-200 font-mono"
              placeholder="Type here and press enter."
            />
            <span class="retro-cursor"></span>
          </div>
          <button
            class="run-button px-4 rounded-r-xl border-4 border-blue-50 bg-yellow-300 text-black hover:bg-yellow-400 focus:outline-none"
          >
            Run
          </button>
        </div>
      </div>
    </div>
    <div class="mt-4">
      <div class="solution-content mt-2" style="display: none;">
        <slot name="solution"></slot>
      </div>
    </div>
  </div>
</bubble-repl-tutorial>

<style>
  .input-button-container {
    display: flex;
    align-items: stretch;
  }
  .input-wrapper {
    flex-grow: 1;
    position: relative;
  }
  .run-button {
    margin-left: -1px;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }
  .retro-cursor {
    position: absolute;
    bottom: 10px;
    left: 22px;
    width: 14px;
    height: 4px;
    background-color: blue;
    animation: blink 1s step-end infinite;
  }
  .input {
    caret-color: transparent;
    line-height: 1.5;
    padding-bottom: 6px;
    white-space: nowrap;
    overflow-x: auto;
  }
  .input::-webkit-scrollbar {
    display: none;
  }
  .input {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .terminal-container::-webkit-scrollbar {
    width: 8px;
  }
  .terminal-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }
  .terminal-container::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 4px;
  }
  .terminal-container::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
</style>

<script is:inline>
  class BubbleREPLTutorial extends HTMLElement {
    constructor() {
      super();
      this.bubbleInterpreter = null;
      this.isREPLReady = false;
      this.isFirstRun = true;
      this.isWaitingForInput = false;
      this.inputResolve = null;
      this.inputValue = null;
      this.inputBuffer = '';
      this.isInBlock = false;
    }

    connectedCallback() {
      this.initialCode = this.getAttribute('data-initial-code') || '';
      this.active = this.getAttribute('data-active') === 'true';
      this.terminal = this.querySelector('.terminal');
      this.loadingContainer = this.querySelector('.loading-container');
      this.errorContainer = this.querySelector('.error-container');
      this.terminalContainer = this.querySelector('.terminal-container');
      this.inputContainer = this.querySelector('.input-container');
      this.progressBar = this.querySelector('.progress-bar');
      this.input = this.querySelector('.input');
      this.runButton = this.querySelector('.run-button');
      this.solutionToggle = this.querySelector('.solution-toggle');
      this.solutionContent = this.querySelector('.solution-content');
      this.retroCursor = this.querySelector('.retro-cursor');

      this.loadAndRunBubbleREPL();

      this.input.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          this.handleEnter();
        }
      });

      this.input.addEventListener("input", () => this.updateCursorPosition());

      this.runButton.addEventListener("click", () => this.handleRunButton());

      if (this.solutionToggle) {
        this.solutionToggle.addEventListener("click", () => this.toggleSolution());
      }

      if (this.active) {
        this.input.focus();
      }
    }

    async loadAndRunBubbleREPL() {
      try {
        this.updateProgress(10, "Fetching WASM executor...");
        const response = await fetch("/public/wasm_exec.js");
        if (!response.ok) {
          throw new Error(`Failed to fetch WASM executor: ${response.status} ${response.statusText}`);
        }
        const wasmExecScript = await response.text();
        console.log("WASM executor fetched successfully");

        this.updateProgress(30, "Evaluating WASM executor...");
        eval(wasmExecScript);
        console.log("WASM executor evaluated successfully");

        this.updateProgress(50, "Fetching Bubble REPL WASM...");
        const go = new Go();
        const result = await WebAssembly.instantiateStreaming(
          fetch("/public/bubble.wasm"),
          go.importObject
        );
        console.log("Bubble REPL WASM fetched and instantiated successfully");

        this.updateProgress(70, "Initializing Bubble REPL...");
        go.run(result.instance);
        this.bubbleInterpreter = globalThis.bubbleREPL;
        if (!this.bubbleInterpreter) {
          throw new Error("bubbleREPL not found in global scope");
        }
        this.isREPLReady = true;
        console.log("Bubble REPL initialized successfully");

        this.updateProgress(100, "bubble bubble bubble!");
        setTimeout(() => {
          this.loadingContainer.style.display = "none";
          this.inputContainer.style.display = "block";
          this.input.value = this.initialCode;
          if (this.active) {
            this.input.focus();
          }
          this.updateCursorPosition();
        }, 500);

        this.originalPrompt = window.prompt;
        window.prompt = (message) => {
          return this.handleInput(message);
        };

        this.bubbleInterpreter.setOutputCallback((text) => {
          this.handleOutput(text);
        });

        if (typeof this.bubbleInterpreter.overrideInput === 'function') {
          this.bubbleInterpreter.overrideInput((message) => {
            return this.handleInput(message);
          });
        }

      } catch (error) {
        console.error("Error loading Bubble REPL:", error);
        this.showError(`Failed to load Bubble REPL: ${error.message}`);
      }
    }

    updateProgress(percentage, message) {
      this.progressBar.style.width = `${percentage}%`;
      this.loadingContainer.querySelector("div").textContent = message;
    }

    showError(message) {
      this.loadingContainer.style.display = "none";
      this.errorContainer.style.display = "block";
      this.errorContainer.textContent = message;
    }

    handleRunButton() {
      if (this.isInBlock) {
        this.inputBuffer += this.input.value + '\n';
        this.appendToTerminal('> ' + this.input.value);
        this.input.value = '  '; // Add indentation
      } else {
        this.runCode(this.input.value);
      }
    }

    handleEnter() {
      const currentLine = this.input.value.trim();

      if (this.isWaitingForInput) {
        this.submitInput();
      } else if (this.isInBlock || this.isBlockStart(currentLine)) {
        this.isInBlock = true;
        this.inputBuffer += this.input.value + '\n';
        this.appendToTerminal('> ' + this.input.value);
        this.input.value = '  '; // Add indentation
      } else {
        this.runCode(this.input.value);
      }

      if (this.isBlockEnd(currentLine)) {
        this.isInBlock = false;
        this.runCode(this.inputBuffer);
        this.inputBuffer = '';
      }

      this.updateCursorPosition();
    }

    isBlockStart(line) {
      return /^if\b/.test(line);
    }

    isBlockEnd(line) {
      return /^end\s+if\b/.test(line);
    }

    async runCode(code) {

      code = code.trim();
     code = code.replace(/[“”]/g, '"').replace(/[‘’]/g, "'");


      if (!this.isREPLReady) {
        this.appendToTerminal("REPL not loaded yet. Please wait...");
      } else if (code !== "") {
        if (this.isFirstRun) {
          this.revealTerminal();
          this.isFirstRun = false;
        }

        const codeLines = code.split('\n');
        codeLines.forEach(line => {
          this.appendToTerminal('> ' + line.trim());
        });

        try {
          if ((code.startsWith("set ") || code.includes(" to ") || code.includes(" = ")) && code.includes("input")) {
            let varName, inputPrompt;
            if (code.includes(" = ")) {
              [varName, inputPrompt] = code.split(" = ");
            } else {
              [varName, inputPrompt] = code.split(" to ");
              varName = varName.replace("set ", "");
            }
            varName = varName.trim();
            inputPrompt = inputPrompt.replace("input", "").trim().replace(/^"/, '').replace(/"$/, '');

            this.clearInputAndResetCursor();
            this.inputValue = await this.handleInput(inputPrompt);
            const result = await this.bubbleInterpreter.runBubble(`set ${varName} to "${this.inputValue}"`);
            if (result !== undefined && result !== null && result !== "") {
              this.handleOutput(result);
            }
          } else {
            const result = await this.bubbleInterpreter.runBubble(code);
            if (result !== undefined && result !== null) {
              // Handle the case where result is not a string
              if (typeof result === 'object') {
                this.handleOutput(JSON.stringify(result));
              } else {
                this.handleOutput(result.toString());
              }
            }
          }
        } catch (error) {
          console.error("Error running code:", error);
          this.handleOutput("Error: " + error.message);
        }
      }

      if (!this.isInBlock && !this.isWaitingForInput) {
        this.clearInputAndResetCursor();
      }
    }

    appendToTerminal(text) {
      const newElement = document.createElement("div");
      newElement.textContent = text;
      if (text.startsWith('>')) {
        newElement.style.color = 'blue'; // or any color you prefer for input
      }
      this.terminal.appendChild(newElement);
      this.terminalContainer.scrollTop = this.terminalContainer.scrollHeight;
    }

    handleOutput(text) {
      text = text.trim();
      if (text !== "") {
        this.appendToTerminal(text);
      }
    }

   handleInput(message) {
  return new Promise((resolve) => {
    this.isWaitingForInput = true;
    this.inputResolve = resolve;
    this.input.placeholder = message || "Enter input...";
    this.input.focus();
    this.runButton.textContent = "Submit";
    this.appendToTerminal(message || "Enter input:");
  }).then((userInput) => {
    this.inputValue = userInput.replace(/[“”]/g, '"').replace(/[‘’]/g, "'");


    // Convert curly quotes to straight double quotes
    return this.inputValue;
  });
}

    submitInput() {
      const userInput = this.input.value;
      this.appendToTerminal(`> ${userInput}`);
      this.inputValue = userInput;
      this.input.value = "";
      this.input.placeholder = "Type your code here and press Enter to run";
      this.runButton.textContent = "Run";
      this.isWaitingForInput = false;
      if (this.inputResolve) {
        this.inputResolve(userInput);
        this.inputResolve = null;
      }
    }

    clearInputAndResetCursor() {
      this.input.value = '';
      this.updateCursorPosition();
      this.input.focus();
    }

    revealTerminal() {
      this.terminalContainer.style.height = '144px';
      setTimeout(() => {
        this.terminalContainer.style.overflowY = 'auto';
      }, 500);
    }

    toggleSolution() {
      if (this.solutionContent.style.display === "none") {
        this.solutionContent.style.display = "block";
        this.solutionToggle.textContent = "Hide Solution";
      } else {
        this.solutionContent.style.display = "none";
        this.solutionToggle.textContent = "Show Solution";
      }
    }

    updateCursorPosition() {
      const inputRect = this.input.getBoundingClientRect();
      const cursorPosition = this.input.selectionStart;
      const textWidth = this.getTextWidth(this.input.value.substring(0, cursorPosition));
      const maxWidth = inputRect.width - 40;
      const clampedLeft = Math.min(textWidth, maxWidth);
      this.retroCursor.style.left = `${clampedLeft + 22}px`;

      if (textWidth > maxWidth) {
        this.input.scrollLeft = textWidth - maxWidth;
      } else {
        this.input.scrollLeft = 0;
      }
    }

    getTextWidth(text) {
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      context.font = getComputedStyle(this.input).font;
      return context.measureText(text).width;
    }
  }

  customElements.define('bubble-repl-tutorial', BubbleREPLTutorial);
</script>
